from data.config import filter_dict, sort_dict, type_interp


# станции -> сортировка -> фильтрация -> количество

class BAD_REQUEST:
    """
    Enum ответов для запроса /req
    """
    SERVER_ERROR: str = "Сервер не отвечает\nПопробуйте через 10 минут"
    ZERO_ANSWER: str = """Ответ на ваш запрос пуст
Либо электрички не ходят по данному направлению, либо вы указали неверный запрос
Попробуйте проверить правильность написания названия станций и повторите запрос"""
    ZERO_ARGS: str = "В запросе должно быть указаны станции отправления и прибытия"
    TOO_MANY_ARGS: str = "В команде должен быть хотя-бы один пробел - разделяющий станции"

    BAD_SORT: str = """\
В качестве значения типа сортировки указать одно из данных значений:
0 / departure_time / dpt - по времени прибытия
1 / arrival_time / art - по времени отправления
2 / path_time / pht - по времени в пути"""

    BAD_FILTER: str = """
В качестве значения типа электричек необходимо указать одно из данных значений:
0 / all - все электрички
1 / speed / sd - только скоростные
2 / regular / rg - только обычные
"""
    BAD_STATION: str = "Станция, которую вы указали не найдена"
    BAD_COL: str = "В качестве значения количества электричек должно быть указано число"
    BAD_TIME: str = "В качестве значения времени должно быть указано время в формате +MM или HH:MM"
    BAD_MULTI: str = "В запросе с множеством станций прибытия/отправления необходимо\
указать хотя бы один перенос строки"


class EDUC:
    """
    Enum обучения
    """

    CLASSIC = """\
У этого бота множество возможностей!
Чтобы увидеть базовый функционал вы можете написать команду /menu , которая позволит вам:
- Сделать запрос на расписание от станции(ый) до станции(ый). \
Дальше можно будет изменить параметры запроса или оставить по умолчанию. 
- Вызвать меню "Сохранённые запросы", можно будет взаимодействовать с сохранёнными запросами \
- Нажав "Сохранённые маршруты" можно будет создать или удалить маршруты, о которых вы будете получать уведомления\
- Во вкладке настройки можно изменить параметры для запросов по умолчанию или отправить отзыв админу! 
"""

    WHOLE = """\
Продвинутый функционал: 
- Сделать запрос на расписание от станции(ый) до станции(ый), доступны параметры сортировки, параметры фильтрации и \
количества электричек в одном запросе (/help req)\
- Сохранить определённый запрос, чтобы быстро использовать его из меню, \
а так же возможность изменить уже сохранённый путь \
- Сохранить определённый маршрут, чтобы получать уведомления о нём\\
- Написать отзыв, который поступит напрямую администратору, \
который будет отправлен анонимно или не анонимно, в зависимости от параметров (/help comment)\
- Сохранить/удалить информацию, которую бот сохранил о пользователе (/help json , /help del)
"""


class HELP:
    """
    Enum ответов для запроса /help
    """
    START_NEW_F = """\
Доброго времени суток, {}!
Чтобы получить инструкцию работы с ботом, используйте команду /help"""
    START_OLD_F = """\
Доброго времени суток, {}!
Все ваши настройки сохранились на сервере, так что вы можете продолжать работу в том же режиме."""

    BASE_F = """\
Доброго времени суток, {}! 
Этот бот позволяет узнавать актуальное расписание электричек с сортировками и фильтрами
Доступные запросы выглядят так:
/req - узнать расписание нескольких первых электричек

Чтобы узнать подробнее про каждый параметр запроса, необходимо ввести команду /help [команда]. 
К примеру:
/help req

Для обращений можете использовать почту iikonstantinov@edu.hse.ru
"""
    REQ = f"""\
Обычный запрос выглядит так:
/req <станция_отправления> <станция_прибытия> [первое_время_прибытия] [тип_сортировки]\
 [тип_фильтра] [количество_электричек]
В качестве первого опционального параметра можно указать время в формате
+MM или HH.MM, где HH - часы, а MM - минуты

В качестве второго опционального параметры можно указать один из данных значений:
{' / '.join(list(sort_dict.keys())[0])} - по времени прибытия
{' / '.join(list(sort_dict.keys())[1])} - по времени отправления
{' / '.join(list(sort_dict.keys())[2])} - по времени в пути

В качестве третьего опционального параметры можно указать один из данных значений:
{' / '.join(list(filter_dict.keys())[0])} - все электрички
{' / '.join(list(filter_dict.keys())[1])} - только скоростные
{' / '.join(list(filter_dict.keys())[2])} - только обычные

В качестве последнего опционального параметра можно указать число от 1го до 20ти."""
    SET = """\
Этот запрос позволяет менять значения по умолчанию для каждого вашего запроса
синтаксис: 
/set <тип_параметра> <значение>"""


class SET:
    """
    Enum ответов для запроса /set
    """
    BAD_COL = """\
Вы указали неправильное количество аргументов
Для данной функции нужно всего два: тип параметра и новое значение по умолчанию"""
    BAD_PARAM = f"""В качестве значения имени параметра необходимо указать что-либо из этого списка:\n\
{' / '.join(list(type_interp.keys())[0])} -- тип сортировки
{' / '.join(list(type_interp.keys())[1])} -- тип фильтра
{' / '.join(list(type_interp.keys())[2])} -- обращение к вам
{' / '.join(list(type_interp.keys())[3])} -- количество электричек
"""
    BAD_VAR = f"""В качестве значения параметра необходимо указать что-либо из этого списка - 
Для типа сортировки:
{' / '.join(list(sort_dict.keys())[0])} - по времени прибытия
{' / '.join(list(sort_dict.keys())[1])} - по времени отправления
{' / '.join(list(sort_dict.keys())[2])} - по времени в пути

Для типа фильтрации:
{' / '.join(list(filter_dict.keys())[0])} - все электрички
{' / '.join(list(filter_dict.keys())[1])} - только скоростные
{' / '.join(list(filter_dict.keys())[2])} - только обычные

Для имени - набор от 1 до 255 символов из набора: строчные или прописные латинские или кириллические\
символы, цифры от 0 до 9, а так же \'_\'

Для количества электричек: число от 1 до 20."""

    SUCCESS_F = "Параметр {} успешно заменен на значение {}!"


class CACHE_REQ:
    """
    Enum ответов для запроса кеширование запроса
    """
    BAD_COL = """\
Вы указали неправильное количество аргументов
Для данной функции необходимо указать такие аргументы:
<станция_отправления> - <станция_прибытия> [короткое_имя] [тип_сортировки] [тип_фильтрации]\
 [количество_электричек]
Если не указать короткое имя, то вместо него будет использоваться
"""

    BAD_NAME = """\
Имя сохраненного запроса должно состоять из следующих символом: набор от 1 до 255 символов из набора: строчные или \
прописные латинские или кириллические символы, цифры от 0 до 9, а так же \'_\'"""

    SUCCESS = "Ваш запрос успешно добавлен!"
    UNSUCCESS = "Что-то пошло не так"


class CACHE_PATH:
    """
    Enum ответов для запроса кеширование пути
    """
    BAD_NUM = """В запросе, который вы указали нет электрички с таким номером"""
    SUCCESS = "Ваш путь успешно добавлен!"
    ERROR = "Ваш путь не добавлен :("
    MESSAGE_F = """Ваше электричка отойдет через {} мин ({}) со станции {}."""
    CHANGE_F = """Время типичное отправления вашей электрички изменилось: теперь она отправляется на {} мин {}"""


class DEL_INFO:
    """
    Enum ответов для запроса удаления информации
    """
    SUCCESS = "Информация о вас успешно удалена! Чтобы заново начать работу с ботом используйте команду /start"
    UNSUCCESSFUL = "Видимо произошла какая-то ошибка, попробуйте еще раз."


class COMMENT:
    """
    Enum ответов для запроса отзыва на бота
    """
    GET_ARGS = "Введите ваш отзыв."
    SUCCESS_F = "Спасибо за ваш отзыв!\nОн был успешно отправлен {}анонимно автору бота."
    UNSUCCESSFUL = "Видимо произошла какая-то ошибка, проверьте корректность аргументов запроса и попробуйте еще раз."
    TO_ADMIN_F = "Отправитель:\n\n{}\n\nСообщение:\n\n{}"


class RECACHE:
    """
    Enum ответов на запросы перезаписи значения в существующие юзера/запроса/маршрута
    """
    USER_SUCCESS = "Значения для пользователя установлены на значения по умолчанию."
    USER_ERROR = "Что-то пошло не так, попробуйте еще раз или обратитесь к админу."
